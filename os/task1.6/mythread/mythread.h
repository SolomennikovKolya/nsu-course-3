#ifndef MYTHREAD_H
#define MYTHREAD_H

// #include <sys/types.h>
// #include <ucontext.h>

// Управляющая структура потока
typedef struct
{
	void *(*start_routine)(void *); // Указатель на стартовую функцию потока
	void *arg;						// Аргументы для стартовой функции
	void *retval;					// Результат стартовой функции
	void *stack;					// Указатель на начало стека
	int tid;						// Идентификатор потока
	int pid;						// Идентификатор процесса
	int finished;					// Завершён поток или нет
	int joined;						// Присоединён поток или нет
									// int canceled;					// Отменён поток или нет
									// ucontext_t before_start_routine; // Контекст процессора перед запуском рутины
} mythread_struct_t;

// Указатель на управляющую структуру потока
typedef mythread_struct_t *mythread_t;

/* Создание своего ядерного потока.
`thread`        - указатель на память, куда будет положен указатель на управляющую структуру потока
`start_routine` - начальная функция потока
`arg`           - аргументы для начальной функции
Возвращает: успех/неудача (0 либо -1) */
int mythread_create(mythread_t *thread, void *(*start_routine)(void *), void *arg);

/* Ожидание завершения потока. Несколько потоков не могут ждать завершения одного.
Если они пытаются выполнить это, один поток завершается успешно, а все остальные — с ошибкой.
`thread` - идентификатор ожидаемого потока
`ret`    - значение, которое вернул ожидаемый поток
Возвращает: успех/неудача (0 либо -1) */
int pthread_join(mythread_t thread, void **ret);

// Возвращает идентификатор текущего потока
// int mythread_self(void);

#endif
