import string;
import lingo/pegcode/driver;

import runtime;
import sys/system;
import ds/tree;
import lingo/pegcode/parsic;
import net/url_parameter;
import math/math;


Exp ::= Add, Mul, Div, Pow, Int, Double;
Add : (e1 : Exp, e2 : Exp);
Mul : (e1 : Exp, e2 : Exp);
Div : (e1 : Exp, e2 : Exp);
Pow : (e1 : Exp, e2 : Exp);
Int : (i : int);
Double : (d : double);
Var : (v : string);

getValue(e: Exp) -> int {
    switch(e) {
        Add(e1, e2): getValue(e1) + getValue(e2);
        Mul(e1, e2): getValue(e1) * getValue(e2);
		Div(e1, e2): getValue(e1) / getValue(e2);
		Pow(e1, e2): pow(getValue(e1), getValue(e2));
		Int(i): i;
    }
}

getRepr(e: Exp) -> string {
    switch(e) {
        Add(e1, e2): "Add(" + getRepr(e1) + " , " + getRepr(e2) + ")";
        Mul(e1, e2): "Mul(" + getRepr(e1) + " , " + getRepr(e2) + ")";
        Div(e1, e2): "Div(" + getRepr(e1) + " , " + getRepr(e2) + ")";
        Pow(e1, e2): "Pow(" + getRepr(e1) + " , " + getRepr(e2) + ")";
        Int(i): "Int(" + d2s(i2d(i)) + ")";
    }
}

foo(a: [string], str: string, len: int, i: int) -> string{
	if(len > 0) {
		str_help: string = "a" + i2s(i);
		foo(a, strReplace(str, str_help, a[i-1]), len-1, i+1);
	} else if(len == 0) {
		str;
	} else {
		"0";
	}
}


grammar = compilePegGrammar("#include grammar.lingo");

main() {
	print("Enter the expression: ");
	parameters: [string] = strSplit(rtrim2(readUntil("\n"), "\n")," ");

	testInput: string = "((a1 / a2) + (a3 + a4))";
	// count: int = 4;
	// str: string = foo(parameters, testInput, count, 1); 
	// println(str);
	
	expression = parsic(grammar, str, defaultPegActions);
    
	value: int = getValue(expression);
	// println(str + " = " +  i2s(value));
	
	// println(getRepr(expression));

    quit(0);
}

/*
Код:
getUrlParameters("param1");

Консоль: 
prog.flow --param1=1-2-3 
*/