import numpy as np


def int_to_binary_array(num: int) -> np.array:
    if not (0 <= num <= 2**11 - 1):
        raise ValueError("Число должно быть в диапазоне от 0 до 2**11 - 1.")

    binary_string = format(num, '011b')
    binary_array = np.array([int(bit) for bit in binary_string])
    return binary_array


G = np.array([
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1],
    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1],
    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1],
    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1],
    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1],
    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1],
    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1]
])

H = np.array([
    [1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0],
    [1, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0],
    [0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0],
    [0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0],
    [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]])

# # Разделяем G на [I_k | P]
# k = G.shape[0]  # Количество строк (k = 11)
# n = G.shape[1]  # Общая длина кода (n = 16)
# P = G[:, k:]    # Матрица P (11x5)

# # Строим проверочную матрицу H = [P^T | I_{n-k}]
# H = np.hstack((P.T, np.eye(n - k, dtype=int)))
# print("Проверочная матрица H:")
# print(H.__str__().replace(' ', ', '))

for mask in range(2**10, 2**11):
    bits = int_to_binary_array(mask)
    v1 = bits[:8]
    v2 = G[0][8:].copy()
    for i in range(1, 11):
        if bits[i] == 0:
            continue
        v2 += G[i][8:]
    v2 %= 2
    if (np.array_equal(v1, v2)):
        print(bits)
        break
    # print(v1, v2)

print("finished")
